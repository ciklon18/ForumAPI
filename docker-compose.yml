version: "3.8"


services:  # Для корректного запуска через docker-compose нужно изменить названия файлов миграций (локально
           # использовались разные бд)
  minio:
    image: bitnami/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9900:9000"
      - "9901:9001"
    volumes:
      - minio-data:/data
    networks:
      - app-network

  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app-network

  postgres:
    image: bitnami/postgresql:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    volumes:
      - /var/docker-db-lab/:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@postgres.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5435:80"
    depends_on:
      - postgres
    networks:
      - app-network

  flyway:
    image: flyway/flyway
    container_name: flyway
    volumes:
      - ./sql:/flyway/sql
    environment:
      - FLYWAY_URL=jdbc:postgresql://postgres:5432/app
      - FLYWAY_USER=admin
      - FLYWAY_PASSWORD=admin
    command: [ "migrate" ]
    depends_on:
      - postgres
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc 127.0.0.1 2181 | grep imok" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # USE PLAINTEXT://localhost:9092 for local launch
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  user-app:
    container_name:
      user-app
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "user-app/target/user-app-1.0.0.jar"
    depends_on:
      - postgres
      - flyway
      - redis
      - kafka
    ports:
      - "9444:9444"
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      USER_DATABASE_URL: jdbc:postgresql://postgres:5432/app


  forum-app:
    container_name:
      forum-app
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "forum-app/target/forum-app-1.0.0.jar"
    depends_on:
      - postgres
      - flyway
      - redis
      - kafka
    ports:
      - "9445:9445"
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      FORUM_DATABASE_URL: jdbc:postgresql://postgres:5432/app

  file-app:
    container_name:
      file-app
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "file-app/target/file-app-1.0.0.jar"
    depends_on:
      - postgres
      - flyway
      - redis
    ports:
      - "9446:9446"
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      FILE_DATABASE_URL: jdbc:postgresql://postgres:5432/app


  notification-app:
    container_name:
      notification-app
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "notification-app/target/notification-app-1.0.0.jar"
    depends_on:
      - postgres
      - flyway
      - redis
      - kafka
    ports:
      - "9447:9447"
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      NOTIFICATION_DATABASE_URL: jdbc:postgresql://postgres:5432/app

networks:
  app-network:
    driver: bridge

volumes:
  postgres:
    driver: local
  minio-data:
    driver: local
  kafka_data:
